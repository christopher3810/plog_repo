replicaCount: 1

# 사용할 도커 이미지의 정보 설정
image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

#private Docker registry에서 이미지를 가져오는데 사용할 secret의 목록.
imagePullSecrets: []

#헬름 차트의 이름을 재정의
nameOverride: ""
fullnameOverride: ""

# 쿠버네티스 서비스 계정 설정
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
#  파드에 추가할 어노테이션
podAnnotations: {}

# 파드 또는 컨테이너 보안 컨텍스트
podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

#쿠버네티스 서비스 설정
service:
  type: ClusterIP
  port: 80

#인그레스 리소스 설정.
ingress:
  enabled: true
  className: "nginx"
  annotations: {}
  hosts:
    - host: plog.ingress
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

#파드가 사용할 수 있는 자원(CPU, 메모리 등)의 양을 설정
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

#스케줄링 설정을 위한 노드 선택
nodeSelector: {}
tolerations: []
affinity: {}

# PostgreSQL 서비스에 대한 설정
postgresql:
  persistence:
    enabled: true
    size: 1Gi
  postgresqlUsername: postgres
  postgresqlPassword: 1234
  securityContext:
    runAsUser: 999
  networkPolicy:
    enabled: true
  livenessProbe:
    exec:
      command:
      - sh
      - -c
      - pg_isready -U postgres
  readinessProbe:
    exec:
      command:
      - sh
      - -c
      - pg_isready -U postgres
    initialDelaySeconds: 5
    timeoutSeconds: 3


## MongoDB 서비스에 대한 설정
mongodb:
  persistence:
    enabled: true
    size: 1Gi
  mongodbUsername: mongo
  mongodbPassword: 1234
  mongodbDatabase: my_database
  securityContext:
    runAsUser: 999
  networkPolicy:
    enabled: true
  livenessProbe:
    exec:
      command:
      - sh
      - -c
      - mongo --eval "db.adminCommand('ping')"
  readinessProbe:
    exec:
      command:
      - sh
      - -c
      - mongo --eval "db.adminCommand('ping')"
    initialDelaySeconds: 5
    timeoutSeconds: 3

# Redis 서비스에 대한 설정
redis:
  persistence:
    enabled: true
    size: 1Gi
  redisPassword: 1234
  securityContext:
    runAsUser: 999
  networkPolicy:
    enabled: true
  livenessProbe:
    exec:
      command:
      - sh
      - -c
      - redis-cli ping
  readinessProbe:
    exec:
      command:
      - sh
      - -c
      - redis-cli ping
    initialDelaySeconds: 5
    timeoutSeconds: 3

# Vault 서비스에 대한 설정
vault:
  persistence:
    enabled: true
    size: 1Gi
  securityContext:
    runAsUser: 999
  networkPolicy:
    enabled: true
  injector:
    enabled: true
  livenessProbe:
    exec:
      command:
      - sh
      - -c
      - vault status -tls-skip-verify
  readinessProbe:
    exec:
      command:
      - sh
      - -c
      - vault status -tls-skip-verify
    initialDelaySeconds: 5
    timeoutSeconds: 3